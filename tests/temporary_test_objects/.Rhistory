optimal_combinations <- dropped_combinations[[sample(which(nr_unique_pairs == nr_best),
1)]] # multiple optimal solutions exist
### sources
# https://stat.ethz.ch/R-manual/R-devel/library/utils/html/combn.html
# https://en.wikipedia.org/wiki/All-pairs_testing
# http://www.softwaretestinghelp.com/what-is-pairwise-testing/
### packages
### set-up
## how many variables you want/ what size each variable?
nr_values <- c(3,3,3)
nr_variables <- length(nr_values)
nr_drops <- 10000 # the more the merrier, the more the slower
## create variables and parameters
variables <- LETTERS[1:nr_variables] # variables uppercase
parameters <- split(letters[1:sum(nr_values)],
rep(1:nr_variables, nr_values[1]:nr_values[length(nr_values)])) # parameters lowercase
names(parameters) <- variables
### all combinations
combinations <- expand.grid(parameters)
### drop combinations
## minimum number of tests
nr_optimal <- prod(sort(sapply(parameters, length), decreasing = TRUE)[1:2]) # two variables with the most combinations
## function to drop combinations
drop.fun <- function() combinations[sample(1:nrow(combinations),
size = nr_optimal), ] # how many combinations need to be dropped?
## drop
dropped_combinations <- replicate(n = nr_drops, drop.fun(), simplify = FALSE)
### calculate how many pairs feature
## function to check how many pairs feature
pairs.fun <- function(df_comb) apply(df_comb,
1,
function(x) {
unlist(
rapply(object = combn(x, 2, simplify = FALSE),
f = function(x) paste0(x, collapse = ""),
how = "replace"))
}
)
## pair combinations
pairs <- lapply(dropped_combinations, function(x) pairs.fun(x)) # all pairs
## how many pairs feature?
nr_unique_pairs <- unlist(lapply(pairs, function(x) length(unique(as.character(x)))))
### compare result with optimal solution and theoretical maximum
nr_best <- min(nr_unique_pairs) # your own best simulation
nr_diff_optimal <- nr_best - nr_optimal # difference with optimal number
nr_max <- prod(sapply(parameters, length)) # theoretical maximum
1 - nr_best/nr_max # percentage of tests evaded
### select optimal combinations
optimal_combinations <- dropped_combinations[[sample(which(nr_unique_pairs == nr_best),
1)]] # multiple optimal solutions exist
rm(list = ls())
### sources
# https://en.wikipedia.org/wiki/All-pairs_testing
# http://www.softwaretestinghelp.com/what-is-pairwise-testing/
### packages
### set-up
## how many variables you want/ what size each variable?
nr_values <- c(3,3,3)
nr_variables <- length(nr_values)
nr_drops <- 10000 # the more the merrier, the more the slower
## create variables and parameters
variables <- LETTERS[1:nr_variables] # variables uppercase
parameters <- split(letters[1:sum(nr_values)],
rep(1:nr_variables, nr_values[1]:nr_values[length(nr_values)])) # parameters lowercase
names(parameters) <- variables
### all combinations
combinations <- expand.grid(parameters)
### drop combinations
## minimum number of tests
nr_optimal <- prod(sort(sapply(parameters, length), decreasing = TRUE)[1:2]) # two variables with the most combinations
## function to drop combinations
drop.fun <- function() combinations[sample(1:nrow(combinations),
size = nr_optimal), ] # how many combinations need to be dropped?
## drop
dropped_combinations <- replicate(n = nr_drops, drop.fun(), simplify = FALSE)
### calculate how many pairs feature
## function to check how many pairs feature
pairs.fun <- function(df_comb) apply(df_comb,
1,
function(x) {
unlist(
rapply(object = combn(x, 2, simplify = FALSE),
f = function(x) paste0(x, collapse = ""),
how = "replace"))
}
)
## pair combinations
pairs <- lapply(dropped_combinations, function(x) pairs.fun(x)) # all pairs
### sources
# https://en.wikipedia.org/wiki/All-pairs_testing
# http://www.softwaretestinghelp.com/what-is-pairwise-testing/
### packages
### set-up
## how many variables you want/ what size each variable?
nr_values <- c(3,3,3)
nr_variables <- length(nr_values)
nr_drops <- 1000 # the more the merrier, the more the slower
## create variables and parameters
variables <- LETTERS[1:nr_variables] # variables uppercase
parameters <- split(letters[1:sum(nr_values)],
rep(1:nr_variables, nr_values[1]:nr_values[length(nr_values)])) # parameters lowercase
names(parameters) <- variables
### all combinations
combinations <- expand.grid(parameters)
### drop combinations
## minimum number of tests
nr_optimal <- prod(sort(sapply(parameters, length), decreasing = TRUE)[1:2]) # two variables with the most combinations
## function to drop combinations
drop.fun <- function() combinations[sample(1:nrow(combinations),
size = nr_optimal), ] # how many combinations need to be dropped?
## drop
dropped_combinations <- replicate(n = nr_drops, drop.fun(), simplify = FALSE)
### calculate how many pairs feature
## function to check how many pairs feature
pairs.fun <- function(df_comb) apply(df_comb,
1,
function(x) {
unlist(
rapply(object = combn(x, 2, simplify = FALSE),
f = function(x) paste0(x, collapse = ""),
how = "replace"))
}
)
## pair combinations
pairs <- lapply(dropped_combinations, function(x) pairs.fun(x)) # all pairs
## how many pairs feature?
nr_unique_pairs <- unlist(lapply(pairs, function(x) length(unique(as.character(x)))))
### compare result with optimal solution and theoretical maximum
nr_best <- min(nr_unique_pairs) # your own best simulation
nr_diff_optimal <- nr_best - nr_optimal # difference with optimal number
nr_max <- prod(sapply(parameters, length)) # theoretical maximum
1 - nr_best/nr_max # percentage of tests evaded
### select best combinations
best_combinations <- dropped_combinations[[sample(which(nr_unique_pairs == nr_best),
1)]] # multiple optimal solutions exist
nr_unique_pairs
min(nr_unique_pairs)
which(nr_unique_pairs == nr_best)
sample(which(nr_unique_pairs == nr_best),
1)
?sample(271,1)
sample(10,1)
?sample
sample(c(2,4),1)
sample(c(2,4),1)
sample
### sources
# https://en.wikipedia.org/wiki/All-pairs_testing
# http://www.softwaretestinghelp.com/what-is-pairwise-testing/
### packages
### set-up
## how many variables you want/ what size each variable?
nr_values <- c(3,3,3)
nr_variables <- length(nr_values)
nr_drops <- 1000 # the more the merrier, the more the slower
## create variables and parameters
variables <- LETTERS[1:nr_variables] # variables uppercase
parameters <- split(letters[1:sum(nr_values)],
rep(1:nr_variables, nr_values[1]:nr_values[length(nr_values)])) # parameters lowercase
names(parameters) <- variables
### all combinations
combinations <- expand.grid(parameters)
### drop combinations
## minimum number of tests
nr_optimal <- prod(sort(sapply(parameters, length), decreasing = TRUE)[1:2]) # two variables with the most combinations
## function to drop combinations
drop.fun <- function() combinations[sample(1:nrow(combinations),
size = nr_optimal), ] # how many combinations need to be dropped?
## drop
dropped_combinations <- replicate(n = nr_drops, drop.fun(), simplify = FALSE)
### calculate how many pairs feature
## function to check how many pairs feature
pairs.fun <- function(df_comb) apply(df_comb,
1,
function(x) {
unlist(
rapply(object = combn(x, 2, simplify = FALSE),
f = function(x) paste0(x, collapse = ""),
how = "replace"))
}
)
## pair combinations
pairs <- lapply(dropped_combinations, function(x) pairs.fun(x)) # all pairs
## how many pairs feature?
nr_unique_pairs <- unlist(lapply(pairs, function(x) length(unique(as.character(x)))))
### compare result with optimal solution and theoretical maximum
nr_best <- min(nr_unique_pairs) # your own best simulation
nr_diff_optimal <- nr_best - nr_optimal # difference with optimal number
nr_max <- prod(sapply(parameters, length)) # theoretical maximum
1 - nr_best/nr_max # percentage of tests evaded
### select best combinations
best_combinations <- dropped_combinations[[sample(rep(which(nr_unique_pairs == nr_best), 2),
1)]] # multiple optimal solutions exist
rep(which(nr_unique_pairs == nr_best), 2)
sample(rep(which(nr_unique_pairs == nr_best), 2),
1)
sample(rep(which(nr_unique_pairs == nr_best), 2),
1)
nr_unique_pairs[687]
rm(list = ls())
log(4) - log(2)
mtcars
sapply(mtcars, class) == "numeric"
sapply(mtcars, class)
test <- apply(mtcars, function(x) mean(x))
test <- lapply(mtcars, function(x) mean(x))
test <- sapply(mtcars, function(x) mean(x))
test
write.csv
library(dplyr)
summarize
summarise_
write.csv
library(rvest)
cars_html <- read_html("http://www.kapaza.be/nl/alfa-romeo")
brands_xpath <- "//ul[@id='subcat_1020_level_2']//a"
brands <- cars_html %>% html_nodes(xpath = brands_xpath) %>% html_attr("href")
brands
brands <- strsplit(brands, split = "/")
brands
brands_xpath <- "//ul[@id='subcat_1020_level_2']//a"
brands <- cars_html %>% html_nodes(xpath = brands_xpath) %>% html_attr("href")
brands
rm(list = ls())
### get html cars page
cars_html <- read_html("http://www.kapaza.be/nl/alfa-romeo")
### get urls brands
brands_xpath <- "//ul[@id='subcat_1020_level_2']//a"
brands_url <- cars_html %>% html_nodes(xpath = brands_xpath) %>% html_attr("href")
brands_url
posts <- lapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
posts_xpath <- "//ul[@id='tabnav']//span[@class='no_bold']"
posts <- lapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
posts
posts_xpath <- "//*text()='Alle zoekertjes']/span"
posts <- lapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
posts_xpath <- "//*[text()[contains(.,'Alle zoekertjes')]]"
posts <- lapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
posts[[1]]
posts_xpath <- "//*[text()[contains(.,'Alle zoekertjes')]]/span"
posts <- lapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
?chartr
chartr("áéó", "aeo", "áéólol")
?chartr
posts_xpath <- "//*[text()[contains(.,'Alle zoekertjes')]]/span"
posts <- sapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
posts
posts <- chartr(old = "().", new = "", x = posts)
rep("",3)
rep("?",3)
?gsub
posts_xpath <- "//*[text()[contains(.,'Alle zoekertjes')]]/span"
posts <- sapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
## remove superfluous punctuation
posts <- chartr(old = "().", new = "???", x = posts)
posts <- gsub(pattern = "?", replacement = "", x = posts)
posts
gsub(pattern = "?", replacement = "", x = posts)
posts[1]
?gsub
posts <- gsub(pattern = "?", replacement = " ", x = posts)
posts
posts_xpath <- "//*[text()[contains(.,'Alle zoekertjes')]]/span"
posts <- sapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
## remove superfluous punctuation
posts <- chartr(old = "().", new = "???", x = posts)
posts
gsub(pattern = "?", replacement = "", x = posts)
posts_xpath <- "//*[text()[contains(.,'Alle zoekertjes')]]/span"
posts <- sapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
## remove superfluous punctuation
posts <- chartr(old = "().", new = "aaa", x = posts)
posts <- gsub(pattern = "a", replacement = "", x = posts)
posts
library(stringr)
?str_trim
posts_xpath <- "//*[text()[contains(.,'Alle zoekertjes')]]/span"
posts <- sapply(brands_url[1:2], function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
## remove superfluous punctuation
posts <- chartr(old = "().", new = "aaa", x = posts)
posts <- str_trim(gsub(pattern = "a", replacement = "", x = posts))
posts
rm(list = ls())
### packages
library(rvest)
library(stringr)
### get html cars page
cars_html <- read_html("http://www.kapaza.be/nl/alfa-romeo")
### get urls brands
brands_xpath <- "//ul[@id='subcat_1020_level_2']//a"
brands_url <- cars_html %>% html_nodes(xpath = brands_xpath) %>% html_attr("href")
### get number of posts
## raw output
posts_xpath <- "//*[text()[contains(.,'Alle zoekertjes')]]/span"
posts <- sapply(brands_url, function(x) read_html(x) %>% html_nodes(xpath = posts_xpath) %>% html_text())
## remove superfluous punctuation
posts <- chartr(old = "().", new = "aaa", x = posts)
posts <- str_trim(gsub(pattern = "a", replacement = "", x = posts))
posts
posts <- as.numeric(posts)
library(ggplot2)
brands <- str_split(brands_url)
brands <- str_split(brands_url, pattern = "/")
brands <- sapply(str_split(brands_url, pattern = "/"),
function(x) x[length(x)])
brands
posts_df <- data.frame(brand = brands,
posts = posts)
View(posts_df)
graph_posts <- ggplot(data = posts_df,
aes(x = brand, y = posts)) +
geom_bar(stat = "identity")
plot(graph_posts)
library(dplyr)
posts_df$brand == "auto"
posts_df <- posts_df[!posts_df$brand == "auto", ]
View(posts_df)
graph_posts <- ggplot(data = posts_df,
aes(x = brand, y = reorder(brand, -posts)) +
geom_bar(stat = "identity")
plot(graph_posts)
graph_posts <- ggplot(data = posts_df,
aes(x = brand, y = reorder(brand, -posts))) +
geom_bar(stat = "identity")
plot(graph_posts)
graph_posts <- ggplot(data = posts_df,
aes(x = brand, y = reorder(posts, -posts))) +
geom_bar(stat = "identity")
plot(graph_posts)
graph_posts <- ggplot(data = posts_df,
aes(x = reorder(brand, -posts), y = posts)) +
geom_bar(stat = "identity")
plot(graph_posts)
plot(graph_posts)
graph_posts <- ggplot(data = posts_df,
aes(x = reorder(brand, -posts), y = posts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot(graph_posts)
install.packages("testthat")
library(testthat)
scrape <- function(url,
time_between_requests = 10,
randomization_requests = 3,
save_html = FALSE,
save_path = "C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\data\\kapaza\\base") {
# packages
library(rvest)
# read html
html <- read_html(url)
# write to text
if(save_html == TRUE) {
setwd(save_path)
filename <- sapply(str_split(url, "/"), function(x) x[length(x)])
filename <- gsub(pattern = "\\?o=", replacement = "_", x = filename)
write_xml(x = html, file = paste0(save_path, "\\", filename, ".xml"))
}
# wait
wait_times <- rnorm(n = 1000,
mean = time_between_requests,
sd = time_between_requests/randomization_requests)
Sys.sleep(time = sample(x = wait_times, size = 1)) }
save(scrape, file = "C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\functions\\scrape_kapaza.RData")
rm(srape)
rm(scrape)
source("C:\Users\Felix Timmermans\Desktop\cars_arbitrage\functions\scrape_kapaza.R")
source("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\functions\\scrape_kapaza.R")
View(scrape)
scrape("http://www.kapaza.be/nl/audi?o=2")
scrape("http://www.kapaza.be/nl/audi?o=2", save_html = TRUE)
?str_split
library(stringr)
?str_split
library(stringr)
scrape("http://www.kapaza.be/nl/audi?o=2", save_html = TRUE)
View(scrape)
?expect_that
View(scrape)
temp_test_objects_path <- "C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests\\temporary_test_objects"
### set-up
## load function
source("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\functions\\scrape_kapaza.R")
## create test
context("Scrape kapaza")
## path shortcuts
temp_test_objects_path <- "C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests\\temporary_test_objects"
### expectations
## html is written to file
scrape(url = "http://www.kapaza.be/nl/audi?o=2",
save_html = TRUE,
save_path = temp_test_objects_path)
file.remove(paste0(temp_test_objects_path, "\\audi_2"))
file.remove(paste0(temp_test_objects_path, "\\audi_2.xml"))
test_path(paste0(temp_test_objects_path, "\\audi_2.xml"))
### set-up
## load function
source("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\functions\\scrape_kapaza.R")
## create test
context("Scrape kapaza")
## path shortcuts
temp_test_objects_path <- "C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests\\temporary_test_objects"
### expectations
## html is written to file
scrape(url = "http://www.kapaza.be/nl/audi?o=2",
save_html = TRUE,
save_path = temp_test_objects_path)
test_that("html is written to file", {
test_path(paste0(temp_test_objects_path, "\\audi_2.xml"))
})
file.remove(paste0(temp_test_objects_path, "\\audi_2.xml"))
paste0(temp_test_objects_path, "\\audi_2.xml")
library(testthat)
test_that("html is written to file", {
test_path(paste0(temp_test_objects_path, "\\audi_2.xml"))
})
test_that("html is written to file", {
expect_that(test_path(paste0(temp_test_objects_path, "\\audi_2.xml")))
})
test_that("html is written to file", {
expect_that(test_path(paste0(temp_test_objects_path, "\\audi_2.xml")), TRUE)
})
?expect_that
test_path(paste0(temp_test_objects_path, "\\audi_2.xml"))
list.files()
list.files(temp_test_objects_path)
scrape(url = "http://www.kapaza.be/nl/audi?o=2",
save_html = TRUE,
save_path = temp_test_objects_path)
list.files(temp_test_objects_path)
list.files(temp_test_objects_path)[1]
"audi_2.xml" %in% list.files(temp_test_objects_path)
test_that("html is written to file", {
expect_that("audi_2.xml" %in% list.files(temp_test_objects_path), TRUE)
})
expect_that("audi_2.xml" %in% list.files(temp_test_objects_path), TRUE)
test_that("html is written to file", {
expect_that("audi_2.xml" %in% list.files(temp_test_objects_path), TRUE)
})
expect_true("audi_2.xml" %in% list.files(temp_test_objects_path))
expect_false("audi_2.xml" %in% list.files(temp_test_objects_path))
test_that("html is written to file", {
expect_true("audi_2.xml" %in% list.files(temp_test_objects_path))
})
rm(list = ls())
?test_dir
getwd()
test_dir("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests")
list.files("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests")
test_dir("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests\\functions")
urls <- c("http://www.kapaza.be/nl/audi?o=10",
"http://www.kapaza.be/nl/mercedes-benz?o=10",
"http://www.kapaza.be/nl/renault?o=10",
"http://www.kapaza.be/nl/mini?o=10")
lapply(urls, function(x) scrape(url = x,
save_html = TRUE,
save_path = temp_test_objects_path))
### set-up
## load function
source("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\functions\\scrape_kapaza.R")
## create test
context("Scrape kapaza")
## path shortcuts
temp_test_objects_path <- "C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests\\temporary_test_objects"
### expectations
## htmls are written to file
urls <- c("http://www.kapaza.be/nl/audi?o=10",
"http://www.kapaza.be/nl/mercedes-benz?o=10",
"http://www.kapaza.be/nl/renault?o=10",
"http://www.kapaza.be/nl/mini?o=10")
lapply(urls, function(x) scrape(url = x,
save_html = TRUE,
save_path = temp_test_objects_path))
c("audi_10","mercedes-benz_10","renault_10","mini_10") %in% list.files(temp_test_objects_path)
list.files(temp_test_objects_path)
paste0(c("audi_10","mercedes-benz_10","renault_10","mini_10"),".xml") %in% list.files(temp_test_objects_path)
?all.true
??all true
all(paste0(c("audi_10","mercedes-benz_10","renault_10","mini_10"),".xml") %in% list.files(temp_test_objects_path))
all(paste0(c("audi_10","mercedes-benz_10","renault_10","mini_10"),".xml") %in% list.files(temp_test_objects_path))
test_that("htmls are written to file", {
expect_true(all(paste0(c("audi_10","mercedes-benz_10","renault_10","mini_10"),".xml") %in% list.files(temp_test_objects_path)))
} )
test_dir("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests\\functions")
test_dir("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests\\functions")
?expect_true
file.size(temp_test_objects_path)
?list.files
list.files(temp_test_objects_path, full.names = TRUE)
file.size(list.files(temp_test_objects_path, full.names = TRUE))
xml_sizes <- file.size(list.files(temp_test_objects_path, full.names = TRUE))
all(xml_sizes > 50000)
all(xml_sizes < 50000)
?Sys.time
Sys.time()
Sys.time()
a <- Sys.time()
b <- Sys.time()
b-a
rm(a,b)
?runif
runif(5)
runif(5, min = 1, max = 2)
formals(scrape)
formals(scrape)
a <- 10
5 < a & a < 15
5 < a & a < 8
formals(scrape)
arg_scrape <- formals(scrape)
min_time <- length(urls) * (arg_scrape$time_between_requests - arg_scrape$randomization_requests)
max_time <- length(urls) * (arg_scrape$time_between_requests + arg_scrape$randomization_requests)
test_dir("C:\\Users\\Felix Timmermans\\Desktop\\cars_arbitrage\\tests\\functions")
